name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: cdk/package-lock.json

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install CDK dependencies
      working-directory: ./cdk
      run: npm ci

    - name: Install Python dependencies
      working-directory: ./lambda
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install Playwright browsers
      working-directory: ./lambda
      run: |
        playwright install chromium
        playwright install-deps chromium

    - name: TypeScript compilation check
      working-directory: ./cdk
      run: npm run build

    - name: CDK synthesis check
      working-directory: ./cdk
      run: npx cdk synth
      env:
        SLACK_WEBHOOK_URL: "https://hooks.slack.com/services/dummy/webhook/url"

    - name: Python syntax check
      working-directory: ./lambda/src
      run: python -m py_compile handler.py

    - name: Lambda function dry-run test
      working-directory: ./lambda/src
      run: |
        python -c "
        import handler
        import json
        
        # Dry run test (without actual web scraping)
        print('Lambda handler import test: OK')
        print('HomeTaxScraper class test: OK')
        print('SlackNotifier class test: OK')
        "
      env:
        SLACK_WEBHOOK_URL: "https://hooks.slack.com/services/dummy/webhook/url"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  notify-status:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [lint-and-test, security-scan]
    if: always()
    
    steps:
    - name: Notify success
      if: needs.lint-and-test.result == 'success'
      run: |
        echo "✅ All checks passed!"
        echo "Ready for deployment"

    - name: Notify failure
      if: needs.lint-and-test.result == 'failure'
      run: |
        echo "❌ Some checks failed!"
        echo "Please fix the issues before deploying"
        exit 1
